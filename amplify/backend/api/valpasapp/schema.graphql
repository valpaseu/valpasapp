type UserSettings {
  timeFormat: String
  timeZone: String
  dateFormat: String
}

type CostRate {
  amount: Int
  currency: String
}

type UserMemberships {
  hourlyRate: HourlyRate
  costRate: CostRate
  membershipType: String
  userId: String
}

type TimeInterval {
  duration: String
  end: AWSDateTime
  start: AWSDateTime
}

type TimeEntry @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Editors"], operations: [read, create, update, delete]}]) {
  id: ID!
  billable: Boolean
  description: String
  userId: ID
  workspaceId: ID
  timeInterval: TimeInterval
}

type WorkspaceSettings {
  shortBreak: Float
  dinnerBreak: Float
}

type Membership {
  NewField: String
  hourlyRate: HourlyRate
  membershipType: String
  membershipStatus: String
  userId: ID
}

type HourlyRate {
  amount: String
  currency: String
}

type WorkSpaces @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groups: ["Editors"], operations: [read, create, update, delete]}]) {
  id: ID!
  hourlyRate: HourlyRate
  imageUrl: AWSURL
  memberships: [Membership]
  name: String
  workspaceSettings: WorkspaceSettings
}

type User @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Editors"], operations: [read, create, update, delete]}]) {
  id: ID!
  username: ID
  formChecked: [String]!
  email: String
  memberships: [UserMemberships]
  name: String
  activeWorkspace: String
  profilePicture: String
  settings: UserSettings
  status: String
}

type OnBoardingForm @model @auth(rules: [{allow: groups, groups: ["Editors"], operations: [read, create, update, delete]}, {allow: private, operations: [read]}]) {
  id: ID!
  title: String
  data: [FormItem]
}

type FormItem {
  name: String
  text: String
}
 